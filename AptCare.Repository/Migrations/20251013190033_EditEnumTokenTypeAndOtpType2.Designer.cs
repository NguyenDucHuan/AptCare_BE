// <auto-generated />
using System;
using AptCare.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AptCare.Repository.Migrations
{
    [DbContext(typeof(AptCareSystemDBContext))]
    [Migration("20251013190033_EditEnumTokenTypeAndOtpType2")]
    partial class EditEnumTokenTypeAndOtpType2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AptCare.Repository.Entities.Accessory", b =>
                {
                    b.Property<int>("AccessoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AccessoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AccessoryId");

                    b.ToTable("Accessories");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("AccountId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.AccountOTPHistory", b =>
                {
                    b.Property<int>("OTPId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OTPId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OTPCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OTPType")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("OTPId");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountOTPHistories");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.AccountToken", b =>
                {
                    b.Property<int>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TokenId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeviceInfo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TokenType")
                        .HasColumnType("integer");

                    b.HasKey("TokenId");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountTokens");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.Apartment", b =>
                {
                    b.Property<int>("ApartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ApartmentId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("FloorId")
                        .HasColumnType("integer");

                    b.Property<string>("RoomNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("ApartmentId");

                    b.HasIndex("FloorId");

                    b.ToTable("Apartments");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RepairRequestId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AppointmentId");

                    b.HasIndex("RepairRequestId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.AppointmentAssign", b =>
                {
                    b.Property<int>("AppointmentAssignId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AppointmentAssignId"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("AppointmentAssignId");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("UserId");

                    b.ToTable("AppointmentAssigns");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.CommonArea", b =>
                {
                    b.Property<int>("CommonAreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CommonAreaId"));

                    b.Property<string>("AreaCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("FloorId")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("CommonAreaId");

                    b.HasIndex("FloorId");

                    b.ToTable("CommonAreas");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.Contract", b =>
                {
                    b.Property<int>("ContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ContractId"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("ContractCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContractorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("RepairRequestId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("ContractId");

                    b.HasIndex("RepairRequestId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.Conversation", b =>
                {
                    b.Property<int>("ConversationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ConversationId"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ConversationId");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.ConversationParticipant", b =>
                {
                    b.Property<int>("ParticipantId")
                        .HasColumnType("integer");

                    b.Property<int>("ConversationId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsMuted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ParticipantId", "ConversationId");

                    b.HasIndex("ConversationId");

                    b.ToTable("ConversationParticipants");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FeedbackId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ParentFeedbackId")
                        .HasColumnType("integer");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<int>("RepairRequestId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("FeedbackId");

                    b.HasIndex("ParentFeedbackId");

                    b.HasIndex("RepairRequestId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.Floor", b =>
                {
                    b.Property<int>("FloorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FloorId"));

                    b.Property<string>("BuildingCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("FloorNumber")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("FloorId");

                    b.ToTable("Floors");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.InspectionReport", b =>
                {
                    b.Property<int>("InspectionReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InspectionReportId"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FaultOwner")
                        .HasColumnType("integer");

                    b.Property<string>("Solution")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SolutionType")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("InspectionReportId");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("UserId");

                    b.ToTable("InspectionReports");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InvoiceId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsChargeable")
                        .HasColumnType("boolean");

                    b.Property<int>("RepairRequestId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("InvoiceId");

                    b.HasIndex("RepairRequestId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.InvoiceItem", b =>
                {
                    b.Property<int>("InvoiceItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InvoiceItemId"));

                    b.Property<int>("AccessoryId")
                        .HasColumnType("integer");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("integer");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("InvoiceItemId");

                    b.HasIndex("AccessoryId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceItems");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.MaintenanceRequest", b =>
                {
                    b.Property<int>("MaintenanceRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MaintenanceRequestId"));

                    b.Property<int>("CommonAreaId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Frequency")
                        .HasColumnType("integer");

                    b.Property<DateTime>("NextDay")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Object")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("MaintenanceRequestId");

                    b.HasIndex("CommonAreaId");

                    b.ToTable("MaintenanceRequests");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.MaintenanceTrackingHistory", b =>
                {
                    b.Property<int>("MaintenanceTrackingHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MaintenanceTrackingHistoryId"));

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MaintenanceRequestId")
                        .HasColumnType("integer");

                    b.Property<string>("NewValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OldValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("MaintenanceTrackingHistoryId");

                    b.HasIndex("MaintenanceRequestId");

                    b.HasIndex("UserId");

                    b.ToTable("MaintenanceTrackingHistories");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.Media", b =>
                {
                    b.Property<int>("MediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MediaId"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("MediaId");

                    b.HasIndex("EntityType", "EntityId");

                    b.ToTable("Medias");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MessageId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ConversationId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ReplyMessageId")
                        .HasColumnType("integer");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("MessageId");

                    b.HasIndex("ConversationId");

                    b.HasIndex("ReplyMessageId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<int?>("MessageId")
                        .HasColumnType("integer");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("NotificationId");

                    b.HasIndex("MessageId")
                        .IsUnique();

                    b.HasIndex("ReceiverId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.RepairReport", b =>
                {
                    b.Property<int>("RepairReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RepairReportId"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("RepairReportId");

                    b.HasIndex("UserId");

                    b.ToTable("RepairReports");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.RepairRequest", b =>
                {
                    b.Property<int>("RepairRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RepairRequestId"));

                    b.Property<DateTime?>("AcceptanceTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ApartmentId")
                        .HasColumnType("integer");

                    b.Property<int?>("CommonAreaId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsEmergency")
                        .HasColumnType("boolean");

                    b.Property<int?>("MaintenanceRequestId")
                        .HasColumnType("integer");

                    b.Property<string>("Object")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ParentRequestId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TechniqueId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("RepairRequestId");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("CommonAreaId");

                    b.HasIndex("MaintenanceRequestId");

                    b.HasIndex("ParentRequestId");

                    b.HasIndex("TechniqueId");

                    b.HasIndex("UserId");

                    b.ToTable("RepairRequests");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReportId"));

                    b.Property<int>("CommonAreaId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("ReportId");

                    b.HasIndex("CommonAreaId");

                    b.HasIndex("UserId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.ReportApproval", b =>
                {
                    b.Property<int>("ReportApprovalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReportApprovalId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InspectionReportId")
                        .HasColumnType("integer");

                    b.Property<int>("RepairReportId")
                        .HasColumnType("integer");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("ReportApprovalId");

                    b.HasIndex("InspectionReportId");

                    b.HasIndex("RepairReportId");

                    b.HasIndex("UserId");

                    b.ToTable("ReportApprovals");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.RequestTracking", b =>
                {
                    b.Property<int>("RequestTrackingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RequestTrackingId"));

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RepairRequestId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.HasKey("RequestTrackingId");

                    b.HasIndex("RepairRequestId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("RequestTrackings");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.TechnicianTechnique", b =>
                {
                    b.Property<int>("TechnicianId")
                        .HasColumnType("integer");

                    b.Property<int>("TechniqueId")
                        .HasColumnType("integer");

                    b.HasKey("TechnicianId", "TechniqueId");

                    b.HasIndex("TechniqueId");

                    b.ToTable("TechnicianTechniques");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.Technique", b =>
                {
                    b.Property<int>("TechniqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TechniqueId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("TechniqueId");

                    b.ToTable("Techniques");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TransactionId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("integer");

                    b.Property<int>("TransactionType")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("TransactionId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CitizenshipIdentity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("UserId");

                    b.HasIndex("CitizenshipIdentity")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.UserApartment", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("ApartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("RelationshipToOwner")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoleInApartment")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "ApartmentId");

                    b.HasIndex("ApartmentId");

                    b.ToTable("UserApartments");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.WorkOrder", b =>
                {
                    b.Property<int>("WorkOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WorkOrderId"));

                    b.Property<DateTime?>("ActualEndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ActualStartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EstimatedEndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EstimatedStartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TechnicianId")
                        .HasColumnType("integer");

                    b.HasKey("WorkOrderId");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("TechnicianId");

                    b.ToTable("WorkOrders");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.WorkSlot", b =>
                {
                    b.Property<int>("WorkSlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WorkSlotId"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("Slot")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TechnicianId")
                        .HasColumnType("integer");

                    b.HasKey("WorkSlotId");

                    b.HasIndex("TechnicianId");

                    b.ToTable("WorkSlots");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.WorkSlotStatusTracking", b =>
                {
                    b.Property<int>("WorkSlotStatusTrackingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WorkSlotStatusTrackingId"));

                    b.Property<int>("NewStatus")
                        .HasColumnType("integer");

                    b.Property<int>("PreviousStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StatusChangeTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("WorkSlotId")
                        .HasColumnType("integer");

                    b.HasKey("WorkSlotStatusTrackingId");

                    b.HasIndex("WorkSlotId");

                    b.ToTable("WorkSlotStatusTrackings");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.Account", b =>
                {
                    b.HasOne("AptCare.Repository.Entities.User", "User")
                        .WithOne("Account")
                        .HasForeignKey("AptCare.Repository.Entities.Account", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.AccountOTPHistory", b =>
                {
                    b.HasOne("AptCare.Repository.Entities.Account", "Account")
                        .WithMany("AccountOTPHistories")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.AccountToken", b =>
                {
                    b.HasOne("AptCare.Repository.Entities.Account", "Account")
                        .WithMany("AccountTokens")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.Apartment", b =>
                {
                    b.HasOne("AptCare.Repository.Entities.Floor", "Floor")
                        .WithMany("Apartments")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Floor");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.Appointment", b =>
                {
                    b.HasOne("AptCare.Repository.Entities.RepairReport", "RepairReport")
                        .WithOne("Appointment")
                        .HasForeignKey("AptCare.Repository.Entities.Appointment", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AptCare.Repository.Entities.RepairRequest", "RepairRequest")
                        .WithMany("Appointments")
                        .HasForeignKey("RepairRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RepairReport");

                    b.Navigation("RepairRequest");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.AppointmentAssign", b =>
                {
                    b.HasOne("AptCare.Repository.Entities.Appointment", "Appointment")
                        .WithMany("AppointmentAssigns")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AptCare.Repository.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.CommonArea", b =>
                {
                    b.HasOne("AptCare.Repository.Entities.Floor", "Floor")
                        .WithMany("CommonAreas")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Floor");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.Contract", b =>
                {
                    b.HasOne("AptCare.Repository.Entities.RepairRequest", "RepairRequest")
                        .WithMany("Contracts")
                        .HasForeignKey("RepairRequestId");

                    b.Navigation("RepairRequest");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.ConversationParticipant", b =>
                {
                    b.HasOne("AptCare.Repository.Entities.Conversation", "Conversation")
                        .WithMany("ConversationParticipants")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AptCare.Repository.Entities.User", "Participant")
                        .WithMany("ConversationParticipants")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.Feedback", b =>
                {
                    b.HasOne("AptCare.Repository.Entities.Feedback", "ParentFeedback")
                        .WithMany()
                        .HasForeignKey("ParentFeedbackId");

                    b.HasOne("AptCare.Repository.Entities.RepairRequest", "RepairRequest")
                        .WithMany("Feedbacks")
                        .HasForeignKey("RepairRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AptCare.Repository.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentFeedback");

                    b.Navigation("RepairRequest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.InspectionReport", b =>
                {
                    b.HasOne("AptCare.Repository.Entities.Appointment", "Appointment")
                        .WithMany("InspectionReports")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AptCare.Repository.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.Invoice", b =>
                {
                    b.HasOne("AptCare.Repository.Entities.RepairRequest", "RepairRequest")
                        .WithMany("Invoices")
                        .HasForeignKey("RepairRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RepairRequest");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.InvoiceItem", b =>
                {
                    b.HasOne("AptCare.Repository.Entities.Accessory", "Accessory")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("AccessoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AptCare.Repository.Entities.Invoice", "Invoice")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accessory");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.MaintenanceRequest", b =>
                {
                    b.HasOne("AptCare.Repository.Entities.CommonArea", "CommonArea")
                        .WithMany("MaintenanceRequests")
                        .HasForeignKey("CommonAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommonArea");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.MaintenanceTrackingHistory", b =>
                {
                    b.HasOne("AptCare.Repository.Entities.MaintenanceRequest", "MaintenanceRequest")
                        .WithMany("MaintenanceTrackingHistories")
                        .HasForeignKey("MaintenanceRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AptCare.Repository.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaintenanceRequest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.Message", b =>
                {
                    b.HasOne("AptCare.Repository.Entities.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AptCare.Repository.Entities.Message", "ReplyMessage")
                        .WithMany("ReplyMessages")
                        .HasForeignKey("ReplyMessageId");

                    b.HasOne("AptCare.Repository.Entities.User", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("ReplyMessage");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.Notification", b =>
                {
                    b.HasOne("AptCare.Repository.Entities.Message", "Message")
                        .WithOne("Notification")
                        .HasForeignKey("AptCare.Repository.Entities.Notification", "MessageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AptCare.Repository.Entities.Account", "Receiver")
                        .WithMany("Notifications")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AptCare.Repository.Entities.User", null)
                        .WithMany("Notifications")
                        .HasForeignKey("UserId");

                    b.Navigation("Message");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.RepairReport", b =>
                {
                    b.HasOne("AptCare.Repository.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.RepairRequest", b =>
                {
                    b.HasOne("AptCare.Repository.Entities.Apartment", "Apartment")
                        .WithMany("RepairRequests")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AptCare.Repository.Entities.CommonArea", "CommonArea")
                        .WithMany("RepairRequests")
                        .HasForeignKey("CommonAreaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AptCare.Repository.Entities.MaintenanceRequest", "MaintenanceRequest")
                        .WithMany("RepairRequests")
                        .HasForeignKey("MaintenanceRequestId");

                    b.HasOne("AptCare.Repository.Entities.RepairRequest", "ParentRequest")
                        .WithMany()
                        .HasForeignKey("ParentRequestId");

                    b.HasOne("AptCare.Repository.Entities.Technique", "Technique")
                        .WithMany("RepairRequests")
                        .HasForeignKey("TechniqueId");

                    b.HasOne("AptCare.Repository.Entities.User", "User")
                        .WithMany("RepairRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Apartment");

                    b.Navigation("CommonArea");

                    b.Navigation("MaintenanceRequest");

                    b.Navigation("ParentRequest");

                    b.Navigation("Technique");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.Report", b =>
                {
                    b.HasOne("AptCare.Repository.Entities.CommonArea", "CommonArea")
                        .WithMany("Reports")
                        .HasForeignKey("CommonAreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AptCare.Repository.Entities.User", "User")
                        .WithMany("Reports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CommonArea");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.ReportApproval", b =>
                {
                    b.HasOne("AptCare.Repository.Entities.InspectionReport", "InspectionReport")
                        .WithMany()
                        .HasForeignKey("InspectionReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AptCare.Repository.Entities.RepairReport", "RepairReport")
                        .WithMany("ReportApprovals")
                        .HasForeignKey("RepairReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AptCare.Repository.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InspectionReport");

                    b.Navigation("RepairReport");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.RequestTracking", b =>
                {
                    b.HasOne("AptCare.Repository.Entities.RepairRequest", "RepairRequest")
                        .WithMany("RequestTrackings")
                        .HasForeignKey("RepairRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AptCare.Repository.Entities.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("RepairRequest");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.TechnicianTechnique", b =>
                {
                    b.HasOne("AptCare.Repository.Entities.User", "Technician")
                        .WithMany("TechnicianTechniques")
                        .HasForeignKey("TechnicianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AptCare.Repository.Entities.Technique", "Technique")
                        .WithMany("TechnicianTechniques")
                        .HasForeignKey("TechniqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Technician");

                    b.Navigation("Technique");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.Transaction", b =>
                {
                    b.HasOne("AptCare.Repository.Entities.Invoice", "Invoice")
                        .WithMany("Transactions")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AptCare.Repository.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.UserApartment", b =>
                {
                    b.HasOne("AptCare.Repository.Entities.Apartment", "Apartment")
                        .WithMany("UserApartments")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AptCare.Repository.Entities.User", "User")
                        .WithMany("UserApartments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apartment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.WorkOrder", b =>
                {
                    b.HasOne("AptCare.Repository.Entities.Appointment", "Appointment")
                        .WithMany("WorkOrders")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AptCare.Repository.Entities.User", "Technician")
                        .WithMany()
                        .HasForeignKey("TechnicianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.WorkSlot", b =>
                {
                    b.HasOne("AptCare.Repository.Entities.User", "Technician")
                        .WithMany("WorkSlots")
                        .HasForeignKey("TechnicianId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.WorkSlotStatusTracking", b =>
                {
                    b.HasOne("AptCare.Repository.Entities.WorkSlot", "WorkSlot")
                        .WithMany("WorkSlotStatusTrackings")
                        .HasForeignKey("WorkSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkSlot");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.Accessory", b =>
                {
                    b.Navigation("InvoiceItems");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.Account", b =>
                {
                    b.Navigation("AccountOTPHistories");

                    b.Navigation("AccountTokens");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.Apartment", b =>
                {
                    b.Navigation("RepairRequests");

                    b.Navigation("UserApartments");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.Appointment", b =>
                {
                    b.Navigation("AppointmentAssigns");

                    b.Navigation("InspectionReports");

                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.CommonArea", b =>
                {
                    b.Navigation("MaintenanceRequests");

                    b.Navigation("RepairRequests");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.Conversation", b =>
                {
                    b.Navigation("ConversationParticipants");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.Floor", b =>
                {
                    b.Navigation("Apartments");

                    b.Navigation("CommonAreas");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.Invoice", b =>
                {
                    b.Navigation("InvoiceItems");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.MaintenanceRequest", b =>
                {
                    b.Navigation("MaintenanceTrackingHistories");

                    b.Navigation("RepairRequests");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.Message", b =>
                {
                    b.Navigation("Notification");

                    b.Navigation("ReplyMessages");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.RepairReport", b =>
                {
                    b.Navigation("Appointment")
                        .IsRequired();

                    b.Navigation("ReportApprovals");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.RepairRequest", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Contracts");

                    b.Navigation("Feedbacks");

                    b.Navigation("Invoices");

                    b.Navigation("RequestTrackings");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.Technique", b =>
                {
                    b.Navigation("RepairRequests");

                    b.Navigation("TechnicianTechniques");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.User", b =>
                {
                    b.Navigation("Account");

                    b.Navigation("ConversationParticipants");

                    b.Navigation("Messages");

                    b.Navigation("Notifications");

                    b.Navigation("RepairRequests");

                    b.Navigation("Reports");

                    b.Navigation("TechnicianTechniques");

                    b.Navigation("UserApartments");

                    b.Navigation("WorkSlots");
                });

            modelBuilder.Entity("AptCare.Repository.Entities.WorkSlot", b =>
                {
                    b.Navigation("WorkSlotStatusTrackings");
                });
#pragma warning restore 612, 618
        }
    }
}
